use ark_bn254::Fr;
use ark_ff::Field;
use std::str::FromStr;

fn ark_layer(round_number: usize, inputs: [Fr; 2]) -> [Fr; 2] {
    let c = [
        Fr::from_str("37").unwrap(),
        Fr::from_str(
            "13352247125433170118601974521234241686699252132838635793584252509352796067497",
        )
        .unwrap(),
        Fr::from_str(
            "8959866518978803666083663798535154543742217570455117599799616562379347639707",
        )
        .unwrap(),
        Fr::from_str(
            "3222831896788299315979047232033900743869692917288857580060845801753443388885",
        )
        .unwrap(),
        Fr::from_str(
            "11437915391085696126542499325791687418764799800375359697173212755436799377493",
        )
        .unwrap(),
        Fr::from_str(
            "14725846076402186085242174266911981167870784841637418717042290211288365715997",
        )
        .unwrap(),
        Fr::from_str(
            "3625896738440557179745980526949999799504652863693655156640745358188128872126",
        )
        .unwrap(),
        Fr::from_str("463291105983501380924034618222275689104775247665779333141206049632645736639")
            .unwrap(),
        Fr::from_str(
            "17443852951621246980363565040958781632244400021738903729528591709655537559937",
        )
        .unwrap(),
        Fr::from_str(
            "10761214205488034344706216213805155745482379858424137060372633423069634639664",
        )
        .unwrap(),
        Fr::from_str(
            "1555059412520168878870894914371762771431462665764010129192912372490340449901",
        )
        .unwrap(),
        Fr::from_str(
            "7985258549919592662769781896447490440621354347569971700598437766156081995625",
        )
        .unwrap(),
        Fr::from_str(
            "9570976950823929161626934660575939683401710897903342799921775980893943353035",
        )
        .unwrap(),
        Fr::from_str(
            "17962366505931708682321542383646032762931774796150042922562707170594807376009",
        )
        .unwrap(),
        Fr::from_str(
            "12386136552538719544323156650508108618627836659179619225468319506857645902649",
        )
        .unwrap(),
        Fr::from_str(
            "21184636178578575123799189548464293431630680704815247777768147599366857217074",
        )
        .unwrap(),
        Fr::from_str(
            "3021529450787050964585040537124323203563336821758666690160233275817988779052",
        )
        .unwrap(),
        Fr::from_str(
            "7005374570978576078843482270548485551486006385990713926354381743200520456088",
        )
        .unwrap(),
        Fr::from_str(
            "3870834761329466217812893622834770840278912371521351591476987639109753753261",
        )
        .unwrap(),
        Fr::from_str(
            "12659742686731039365358476379387265707286282519320166941376557394542672080082",
        )
        .unwrap(),
        Fr::from_str(
            "12966562101931370260050847924318102345331111205799422396364512190466354328905",
        )
        .unwrap(),
    ];

    let d = [
        Fr::from_str(
            "8755297148735710088898562298102910035419345760166413737479281674630323398284",
        )
        .unwrap(),
        Fr::from_str(
            "5240474505904316858775051800099222288270827863409873986701694203345984265770",
        )
        .unwrap(),
        Fr::from_str(
            "9012679925958717565787111885188464538194947839997341443807348023221726055342",
        )
        .unwrap(),
        Fr::from_str(
            "21855834035835287540286238525800162342051591799629360593177152465113152235615",
        )
        .unwrap(),
        Fr::from_str(
            "11227229470941648605622822052481187204980748641142847464327016901091886692935",
        )
        .unwrap(),
        Fr::from_str(
            "8277823808153992786803029269162651355418392229624501612473854822154276610437",
        )
        .unwrap(),
        Fr::from_str(
            "20904607884889140694334069064199005451741168419308859136555043894134683701950",
        )
        .unwrap(),
        Fr::from_str(
            "1902748146936068574869616392736208205391158973416079524055965306829204527070",
        )
        .unwrap(),
        Fr::from_str(
            "14452570815461138929654743535323908350592751448372202277464697056225242868484",
        )
        .unwrap(),
        Fr::from_str(
            "10548134661912479705005015677785100436776982856523954428067830720054853946467",
        )
        .unwrap(),
        Fr::from_str(
            "17068729307795998980462158858164249718900656779672000551618940554342475266265",
        )
        .unwrap(),
        Fr::from_str(
            "16199718037005378969178070485166950928725365516399196926532630556982133691321",
        )
        .unwrap(),
        Fr::from_str(
            "19148564379197615165212957504107910110246052442686857059768087896511716255278",
        )
        .unwrap(),
        Fr::from_str(
            "5497141763311860520411283868772341077137612389285480008601414949457218086902",
        )
        .unwrap(),
        Fr::from_str(
            "18379046272821041930426853913114663808750865563081998867954732461233335541378",
        )
        .unwrap(),
        Fr::from_str(
            "7696001730141875853127759241422464241772355903155684178131833937483164915734",
        )
        .unwrap(),
        Fr::from_str("963844642109550260189938374814031216012862679737123536423540607519656220143")
            .unwrap(),
        Fr::from_str(
            "12412434690468911461310698766576920805270445399824272791985598210955534611003",
        )
        .unwrap(),
        Fr::from_str(
            "6971318955459107915662273112161635903624047034354567202210253298398705502050",
        )
        .unwrap(),
        Fr::from_str(
            "10770172635540362964601020863794182894887696822923178038156813414655618516349",
        )
        .unwrap(),
        Fr::from_str(
            "4379020254529723409709605071220835625274218518287145320101599508190949972444",
        )
        .unwrap(),
    ];

    [inputs[0] + c[round_number], inputs[1] + d[round_number]]
}

fn mds_layer(inputs: [Fr; 2]) -> [Fr; 2] {
    [inputs[0] + inputs[1] + inputs[0], inputs[1] + inputs[0]]
}

fn s_box(inputs: [Fr; 2]) -> [Fr; 2] {
    let mut x = inputs[0];
    let mut y = inputs[1];

    x = x - Fr::from(5) * y * y;
    y = y - x.pow(&[
        14981214993055009997,
        6006880321387387405,
        10624953561019755799,
        2789598613442376532,
    ]); // 1/5
    x = x
        + Fr::from(5) * y * y
        + Fr::from_str(
            "8755297148735710088898562298102910035419345760166413737479281674630323398247",
        )
        .unwrap(); //DELTA

    [x, y]
}

fn round(round_number: usize, inputs: [Fr; 2]) -> [Fr; 2] {
    s_box(mds_layer(ark_layer(round_number, inputs)))
}

fn permutation(inputs: [Fr; 2]) -> [Fr; 2] {
    let mut state = inputs;
    for i in 0..21 {
        state = round(i, state);
    }
    state = mds_layer(state);
    state
}

pub fn hash_2_to_1(in1: Fr, in2: Fr) -> Fr {
    let perm = permutation([in1, in2]);
    in1 + perm[0] + in2 + perm[1]
}
